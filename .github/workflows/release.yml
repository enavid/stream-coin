name: Release Pipeline

on:
  push:
    tags:
      - "v*.*.*"       # example v1.0.0, v2.3.4
      - "v*.*.*-*.*"   # example v1.0.0-alpha.1, v1.0.0-beta.2, v1.0.0-rc.1
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (example v1.0.0-alpha.1, v1.0.0-rc.1, v1.3.4)"
        required: true
        default: "v0.0.1-alpha"

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      packages: write 
      contents: write
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: echo "version=${{ github.event.inputs.version || github.ref_name }}" >> $GITHUB_OUTPUT

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        run: cargo test --release --all-features

      - name: Build release binary
        run: cargo build --release --locked

      - name: Strip binary (reduce size)
        run: strip target/release/stream-coin

      - name: Create archive
        run: |
          cd target/release
          tar -czf stream-coin-${{ steps.get_version.outputs.version }}-linux-x86_64.tar.gz stream-coin
          sha256sum stream-coin-${{ steps.get_version.outputs.version }}-linux-x86_64.tar.gz > stream-coin-${{ steps.get_version.outputs.version }}-linux-x86_64.tar.gz.sha256

      - name: Upload binary to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            target/release/stream-coin-${{ steps.get_version.outputs.version }}-linux-x86_64.tar.gz
            target/release/stream-coin-${{ steps.get_version.outputs.version }}-linux-x86_64.tar.gz.sha256
          tag_name: ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.version, '-alpha') || contains(steps.get_version.outputs.version, '-beta') || contains(steps.get_version.outputs.version, '-rc') }}
          generate_release_notes: true

  build-and-push-image:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/stream-coin
          tags: |
            type=semver,pattern={{version}},value=${{ needs.build.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.build.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.build.outputs.version }}
            type=raw,value=latest,enable=${{ !contains(needs.build.outputs.version, '-') }}

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.build.outputs.version }}
