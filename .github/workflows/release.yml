name: Release Pipeline

on:
  push:
    tags:
      - "v*.*.*"       # example v1.0.0, v2.3.4
      - "v*.*.*-*.*"   # example v1.0.0-alpha.1, v1.0.0-beta.2, v1.0.0-rc.1
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (example v1.0.0-alpha.1, v1.0.0-rc.1, v1.3.4)"
        required: true
        default: "v0.0.1-alpha"

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      #- name: Check formatting
      #  run: cargo fmt --all -- --check

      #- name: Run clippy
      #  run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        run: cargo test --all-features

  build:
    needs: test
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: stream-coin
            asset_name: stream-coin-linux-x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: stream-coin
            asset_name: stream-coin-linux-x86_64-musl
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: stream-coin.exe
            asset_name: stream-coin-windows-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: stream-coin
            asset_name: stream-coin-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: stream-coin
            asset_name: stream-coin-macos-arm64
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        shell: bash
        run: echo "version=${{ github.event.inputs.version || github.ref_name }}" >> $GITHUB_OUTPUT

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install musl tools (Linux musl only)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      - name: Build release binary
        run: cargo build --release --locked --target ${{ matrix.target }}

      - name: Strip binary (Unix only)
        if: matrix.os != 'windows-latest'
        run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

      - name: Create archive (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar -czf ${{ matrix.asset_name }}-${{ steps.get_version.outputs.version }}.tar.gz ${{ matrix.artifact_name }}
          sha256sum ${{ matrix.asset_name }}-${{ steps.get_version.outputs.version }}.tar.gz > ${{ matrix.asset_name }}-${{ steps.get_version.outputs.version }}.tar.gz.sha256

      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          cd target/${{ matrix.target }}/release
          Compress-Archive -Path ${{ matrix.artifact_name }} -DestinationPath ${{ matrix.asset_name }}-${{ steps.get_version.outputs.version }}.zip
          (Get-FileHash ${{ matrix.asset_name }}-${{ steps.get_version.outputs.version }}.zip -Algorithm SHA256).Hash | Out-File -FilePath ${{ matrix.asset_name }}-${{ steps.get_version.outputs.version }}.zip.sha256 -NoNewline

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}-${{ steps.get_version.outputs.version }}
          path: |
            target/${{ matrix.target }}/release/${{ matrix.asset_name }}-${{ steps.get_version.outputs.version }}.*

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: echo "version=${{ github.event.inputs.version || github.ref_name }}" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*
          tag_name: ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.version, '-alpha') || contains(steps.get_version.outputs.version, '-beta') || contains(steps.get_version.outputs.version, '-rc') }}
          generate_release_notes: true

  build-and-push-image:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: echo "version=${{ github.event.inputs.version || github.ref_name }}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/stream-coin
          tags: |
            type=semver,pattern={{version}},value=${{ steps.get_version.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.get_version.outputs.version }}
            type=semver,pattern={{major}},value=${{ steps.get_version.outputs.version }}
            type=raw,value=latest,enable=${{ !contains(steps.get_version.outputs.version, '-') }}

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.get_version.outputs.version }}
